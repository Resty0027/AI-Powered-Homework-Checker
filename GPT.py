import streamlit as st
from transformers import GPT2Tokenizer, GPT2LMHeadModel
import torch
import nltk
from nltk.util import ngrams
from nltk.lm.preprocessing import pad_sequence
from nltk.probability import FreqDist
import plotly.express as px
from collections import Counter
from nltk.corpus import stopwords
import string 
import torch.nn.functional as F

#Load gpt2 tokenizer and model
tokenizer = GPT2Tokenizer.from_pretrained('gpt2')
model = GPT2LMHeadModel.from_pretrained('gpt2')

def calculate_perplexity(text):
    tokenized_text = tokenizer.encode(text, return_tensors="pt")
    with torch.no_grad():
        outputs = model(tokenized_text, labels=tokenized_text)
        loss = outputs.loss
    perplexity = torch.exp(loss)
    return perplexity.item()

def calculate_burstiness(text):
    tokens = text.split()
    freq_dict = Counter(tokens)
    num_tokens = len(tokens)
    num_types = len(freq_dict)
    burstiness = (num_types - num_tokens) / (num_types + num_tokens)
    return burstiness

def plot_top_repeated_words(text):
    tokens = text.split()
    stop_words = set(stopwords.words('english'))
    tokens = [token.lower() for token in tokens if token.lower() not in stop_words and token.lower() not in string.punctuation]

    #count
    word_counts = Counter(tokens)
    top_words = word_counts.most_common(10)

    words = [word for word, count in top_words]
    counts = [count for count, count in top_words]

    #Plot
    fig = px.bar(x=words, y=counts, labels={'x':'Words', 'y':'Counts'}, title="Top 10 Most Repeated Words")
    st.plotly_chart(fig, use_container_width=True)


st.set_page_config(layout=("wide"))

st.title("AI-Powered Homework Checker")

text_area = st.text_area("Enter your Text")

if text_area is not None:
    if st.button("Analyze"):
        
        col1, col2, col3, = st.columns([1,1,1])

        with col1:
            st.info("Your Input Text")
            st.success(text_area)

        with col2:
            st.info("Calculated Score")
            perplexity = calculate_perplexity(text_area)
            burstiness_score = calculate_burstiness(text_area)

            st.success("Perplexity Score: "+ str(perplexity))
            st.success("Burstiness Score: "+ str(burstiness_score))
            
            if perplexity < 44.9473 and burstiness_score < -0.0536:
                st.error("Text Analysis Result: AI Generated Content")

            else:
                st.success("Text Analysis Result: Likely Not Generated By AI")
            
            st.warning("Disclaimer: AI plagiarism detector apps can assist in identifying potential instances of plagiarism; however, it is important to note that the result are not fully accurate! Please use this information with responsibility and don't make the decision based on this tool completely.")

        with col3:
            st.info("Basic Insights")
            plot_top_repeated_words(text_area)
